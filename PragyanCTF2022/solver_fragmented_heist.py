#! python3

from sage.all import *
from zlib import crc32
from Crypto.Util.number import bytes_to_long, long_to_bytes


def hashAF(x):
	res = []
	final = b""
	bytesAF = long_to_bytes(x)
	a = bytesAF[:len(bytesAF) % 8]
	
	res.append(a)
	res.append(long_to_bytes(crc32(a)))
	t = (len(bytesAF) // 8)
	bytesAF = bytesAF[len(bytesAF) % 8:]
	for i in range(t):
		a = bytesAF[i*8:(i+1)*8]
		res.append(a)
		res.append(long_to_bytes(crc32(a)))
	for i in res:
		final += i
	res = bytes_to_long(final)
	return (res + (res >> 600)) & 2**(600)-1

p = 93327214260434303138080906179883696131283277062733597039773430143631378719403851851296505697016458801222349445773245718371527858795457860775687842513513120173676986599209741174960099561600915819416543039173509037555167973076303047419790245327596338909743308199889740594091849756693219926218111062780849456373
A = [2720495220767623469285353744013822381852003568708186036185616503729980637299872397663528775139327535373882372413441024067687853130042950311733094495718491989102461186253653660920574, 15843669386575231305658351759203181197336939290074172277291278488719033553337092007099376279196087414169431058207783322243407822366880172512356717418627958539974211317395928935201076097698103133753750610845316760255658006438109555979823148869170489527876600496043886788103609669557918594073292264548123406903]

a = [0, A[0]]
for i in range(2):
	a.append(hashAF(a[i+1]))
a[0] = (A[1] - a[1]*a[1]-a[2]*a[1] ** 2-a[3]*a[1] ** 3) %p
a0 = long_to_bytes(a[0])
print(a0)

# p_ctf{y4u_s75c3ssf7LLy_pull3d_0ff_th3_h3ist}
